{"ast":null,"code":"var _jsxFileName = \"D:\\\\Learn-Web-roamap\\\\Learn-react\\\\netflex-clone\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport Youtube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseURL = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row(_ref) {\n  _s();\n\n  let {\n    title,\n    fetchURL,\n    isLargeRow\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchURL);\n      console.log(request.data.results);\n      setMovies(request.data.results); // console.log(fetchURL)\n\n      return request;\n    }\n\n    fetchData();\n  }, [fetchURL]);\n  const opts = {\n    heigth: '300',\n    width: '100%',\n    playerVars: {\n      autoPlay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    console.log(\"click\");\n\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: handleClick(movie),\n        className: `row_poster ${isLargeRow && \"row_posterLarge\"}`,\n        src: `${baseURL}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(Youtube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["D:/Learn-Web-roamap/Learn-react/netflex-clone/src/Row.js"],"names":["React","useState","useEffect","axios","Youtube","movieTrailer","baseURL","Row","title","fetchURL","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","console","log","data","results","opts","heigth","width","playerVars","autoPlay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","map","poster_path","backdrop_path","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,KAAP,MAAmB,SAAnB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,MAAMC,OAAO,GAAG,sCAAhB;;AAEA,SAASC,GAAT,OAA2C;AAAA;;AAAA,MAA9B;AAACC,IAAAA,KAAD;AAAOC,IAAAA,QAAP;AAAiBC,IAAAA;AAAjB,GAA8B;AAEvC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAea,SAAf,GAA0B;AACtB,YAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUR,QAAV,CAAtB;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYH,OAAO,CAACI,IAAR,CAAaC,OAAzB;AACAT,MAAAA,SAAS,CAACI,OAAO,CAACI,IAAR,CAAaC,OAAd,CAAT,CAHsB,CAItB;;AACA,aAAOL,OAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GATQ,EASN,CAACN,QAAD,CATM,CAAT;AAWA,QAAMa,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETC,IAAAA,KAAK,EAAE,MAFE;AAGTC,IAAAA,UAAU,EAAE;AACRC,MAAAA,QAAQ,EAAE;AADF;AAHH,GAAb;;AAQA,QAAMC,WAAW,GAAIC,KAAD,IAAU;AAC1BV,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AACA,QAAGN,UAAH,EAAc;AACVC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH,KAFD,MAEK;AACDT,MAAAA,YAAY,CAAC,CAAAuB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,KAAe,EAAhB,CAAZ,CACKC,IADL,CACWC,GAAD,IAAQ;AACV,cAAMC,SAAS,GAAE,IAAKC,eAAL,CAAqB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAlC,CAAjB;AAEArB,QAAAA,aAAa,CAACkB,SAAS,CAACf,GAAV,CAAc,GAAd,CAAD,CAAb;AACH,OALL,EAMKmB,KANL,CAMYC,KAAD,IAAUnB,OAAO,CAACC,GAAR,CAAYkB,KAAZ,CANrB;AAOH;AACJ,GAbD;;AAeA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAK7B;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACKG,MAAM,CAAC2B,GAAP,CAAWV,KAAK,iBACb;AAAK,QAAA,OAAO,EAAED,WAAW,CAACC,KAAD,CAAzB;AAAkC,QAAA,SAAS,EAAG,cAAalB,UAAU,IAAI,iBAAkB,EAA3F;AAEA,QAAA,GAAG,EAAG,GAAEJ,OAAQ,GAAEI,UAAU,GAAGkB,KAAK,CAACW,WAAT,GAAuBX,KAAK,CAACY,aAAc,EAFvE;AAE0E,QAAA,GAAG,EAAEZ,KAAK,CAACC;AAFrF,SACKD,KAAK,CAACa,EADX;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAFJ,EASK5B,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAES;AAApC;AAAA;AAAA;AAAA;AAAA,YATnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;;GApDQf,G;;KAAAA,G;AAsDT,eAAeA,GAAf","sourcesContent":["import React, { useState ,useEffect} from 'react'\r\nimport axios  from './axios';\r\nimport './Row.css';\r\nimport Youtube from 'react-youtube'\r\nimport movieTrailer from 'movie-trailer'\r\n\r\nconst baseURL = \"https://image.tmdb.org/t/p/original/\"\r\n\r\nfunction Row({title,fetchURL, isLargeRow}) {\r\n    \r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchURL);\r\n            console.log(request.data.results);\r\n            setMovies(request.data.results);\r\n            // console.log(fetchURL)\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchURL])\r\n\r\n    const opts = {\r\n        heigth: '300',\r\n        width: '100%',\r\n        playerVars: {\r\n            autoPlay: 1,\r\n        }\r\n    }\r\n\r\n    const handleClick = (movie) =>{\r\n        console.log(\"click\")\r\n        if(trailerUrl){\r\n            setTrailerUrl('')\r\n        }else{\r\n            movieTrailer(movie?.name || \"\")\r\n                .then((url) =>{\r\n                    const urlParams =new  URLSearchParams(new URL(url).search);\r\n                    \r\n                    setTrailerUrl(urlParams.get('v'))\r\n                }) \r\n                .catch((error)=> console.log(error))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='row'>\r\n            <h2>{title}</h2>\r\n            <div className='row_posters'>\r\n                {movies.map(movie => (\r\n                    <img onClick={handleClick(movie)} className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                    key={movie.id}\r\n                    src={`${baseURL}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n"]},"metadata":{},"sourceType":"module"}